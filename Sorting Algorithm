// SEARCHING METHODS IN JAVASCRIPT

// findindex(The findIndex() method returns the index (position) of the first element that passes a test. The findIndex() method returns -1 if no match is found. 
// The findIndex() method does not execute the function for empty array elements.)

// indexof (The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.)

// includes(The includes() method determines whether an array includes a certain value among its entries, returning true or false as appropriate.)

// find (The find() method returns the first element in the provided array that satisfies the provided testing function. 
// If no values satisfy the testing function, undefined is returned.)(Uses Function expression rather then Function  defination)



/*let array = ["ankit", "mercy", "lanu", "ben", "hiya"]

function findindex(words){
   console.log(array.indexOf(words)) //finds the index of the items

}
findindex("mercy")
////////////////////////////////////////////////////////////////////
let ar = ["ankit", "mercy", "lanu", "ben", "hiya"]

function indexof(num){
   console.log(ar.indexOf(num))
}
indexof("lanu")

///////////////////////////////////////////////////////////////////
let arr = ["ankit", "mercy", "lanu", "ben", "hiya"]

function includes(word){
   console.log(arr.includes(word))
}
includes('ankit')
//////////////////////////////////////////////////////////////////

let a = [10, 20, 30, 40, 50];
  
    // Method (return element > 10).
    var found = a.find(function (a) {
        return a > 10;
    });
  
    // Printing desired values.
   console.log(found);
//////////////////////////////////////////////////////////////////*/





// Two friends like to pool their money and go to the ice cream parlor. They always choose two distinct flavors and they spend all of their money.

// Given a list of prices for the flavors of ice cream, select the two that will cost all of the money they have.


//var arr = [1, 2, 3, 4, 5, 6] //O(n2) //

// function icecreamParlor(m, arr) {
//     for(let i = 0; i < arr.length; i++){
//         let requiredCost2 = m - arr[i];


//       // if(requiredCost2 < 1) continue;
        
        
//         for(let j = 0; j < arr.length; j++){
//             if(j !== i && arr[j] == requiredCost2){
//                 console.log([i+1, j+1])  

//             }
//         }
//     }
    
// }
// // icecreamParlor(6, arr)

// function icecreamParlor(m, arr){
//  for (i = 0 ; i < arr.length; i++){
//     let retify = m - arr[i]
//   //  if(retify < 1) continue
    
    
//     for(j = 0; j < arr.length; j++){
//         if(j !== i && arr[j] == retify){
//             console.log([i+1, j+1])
//         }
//     }
//  }
// }
// icecreamParlor(6, arr)































// var array = [ 1, 2, 3, 4, 5]

// let mack = (m, array) => {
//  for(i = 0 ; i < array.length; i++){
//    let second = m - array[i];
//    if(second > 2) continue;
   
   
//    for(j = 0; j < array.length; j++){
//       if(j !== i && array[j] == second){
//          console.log([j+1 ,i+1])
//       }

//    }

//  }
// }
// mack(6, array)














// class Stack{
//    constructor(){
//       this.array = []
//    }
//    push(data){
//       this.array.push(data)
//    }
//    print(data){
//       console.log(this.array)
//    }
   
// }

// let list = new Stack()
// list.push(1)
// list.push(2)
// list.push(3)
// list.push(4)
// list.push(5)
// list.push(6)
// //list.print()
// //console.log(list)


// for (i = 0; i < list.length; i++){
//    console.log(list[i])
// }


// class DATA{
//    constructor(list){
//       this.list = list
//    }
// }
// 


// class Call{
//    constructor(){
//       this.array = []
//    }
//    push(data){
//       this.array.push(data)
//    }
//    loop(m, push){
//       for (let i = 0; i < this.push.length; i++){
//          let cost =  m - push[i]
//          if(cost > 1) continue;

//          for(j = 0; j < this.push.length; j++){
//             if(j !== i && this.push[j] == cost){
//                console.log([i+1, j+1])
//             }
//          }
//       }
//    }
//    print(data){
//       console.log(this.push)
//    }
// }
// let list = new Call()
// list.push(1)
// list.push(2)
// list.push(3)
// list.push(4)
// list.loop(6, push)
// //list.print()



// let arr = [ 1 , 2 , 3 , 4 ,5 ]

// let reversed =[]

// for(i = arr.length -1 ; i >= 0; i--){
//    reversed.push(arr[i])
// }

// console.log(reversed);



